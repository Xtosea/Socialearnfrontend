// src/components/ActionCard.jsx
import React, { useState } from "react";
import api from "../api/api";

export default function ActionCard({ task }) {
  const [completed, setCompleted] = useState(false);
  const [loading, setLoading] = useState(false);
  const [earned, setEarned] = useState(null);
  const [newBalance, setNewBalance] = useState(null);

  const handleComplete = async () => {
    if (completed) return;
    try {
      setLoading(true);
      const res = await api.post("/tasks/complete", {
        taskId: task._id,
        type: "action",
      });

      // backend returns: { message, pointsEarned, totalPoints }
      alert(`âœ… ${res.data.message}. You earned ${res.data.pointsEarned} points!`);

      setEarned(res.data.pointsEarned);
      setNewBalance(res.data.totalPoints);
      setCompleted(true);
    } catch (err) {
      console.error(err);
      alert(err.response?.data?.message || "Error completing task");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-4 rounded-2xl shadow bg-white">
      <h3 className="text-lg font-bold capitalize">
        {task.platform} - {task.action}
      </h3>
      <p className="text-sm text-gray-600 truncate">{task.url}</p>
      <p className="text-sm">Quantity: {task.quantity}</p>
      <p className="text-sm">Reward: {task.points} points</p>

      <button
        onClick={handleComplete}
        disabled={completed || loading}
        className={`mt-3 px-4 py-2 rounded text-white transition ${
          completed
            ? "bg-gray-400 cursor-not-allowed"
            : "bg-green-600 hover:bg-green-700"
        }`}
      >
        {completed ? "Completed" : loading ? "Processing..." : "Complete Task"}
      </button>

      {earned && (
        <div className="mt-2 text-sm text-green-700">
          ðŸŽ‰ You earned <strong>{earned}</strong> points! <br />
          ðŸ’° New Balance: <strong>{newBalance}</strong> points
        </div>
      )}
    </div>
  );
}