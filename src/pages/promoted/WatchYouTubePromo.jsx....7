import React, { useState, useEffect } from "react";
import api from "../../api/api";

// Extract YouTube video ID
const extractYouTubeID = (url) => {
  const regExp = /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/)([\w-]{11})/;
  const match = url.match(regExp);
  return match ? match[1] : null;
};

export default function WatchYouTubePromo() {
  const [videos, setVideos] = useState([]);
  const [timeLeft, setTimeLeft] = useState({});

  // Fetch promoted YouTube videos
  useEffect(() => {
    (async () => {
      try {
        const res = await api.get("/tasks/promoted/watch/youtube");
        const tasks = res.data.tasks || [];
        setVideos(tasks);

        // Initialize timers
        const timers = {};
        tasks.forEach((v) => (timers[v._id] = v.duration || 30));
        setTimeLeft(timers);
      } catch (err) {
        console.error("Error fetching promoted videos:", err);
        setVideos([]);
      }
    })();
  }, []);

  // Countdown timers with auto-complete
  useEffect(() => {
    const interval = setInterval(() => {
      setTimeLeft((prev) => {
        const updated = { ...prev };
        Object.keys(updated).forEach((id) => {
          if (updated[id] > 0) updated[id] -= 1;
          else if (updated[id] === 0) {
            const video = videos.find((v) => v._id === id);
            if (video) {
              api.post(`/tasks/watch/${id}/complete`)
                .then(() => {
                  setVideos((prevV) => prevV.filter((v) => v._id !== id));
                  console.log(`🎉 Auto-completed video ${id}, points earned!`);
                })
                .catch((err) => console.error("Error completing watch:", err));
              updated[id] = -1; // prevent multiple calls
            }
          }
        });
        return updated;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [videos]);

  // Start watching manually
  const handleStart = async (videoId) => {
    try {
      await api.post(`/tasks/watch/${videoId}/start`);
      alert("⏳ Watch started! Wait until timer ends to earn points.");
    } catch (err) {
      console.error("Error starting watch:", err);
    }
  };

  // Complete watching manually
  const handleComplete = async (videoId) => {
    try {
      await api.post(`/tasks/watch/${videoId}/complete`);
      alert("🎉 You earned points!");
      setVideos((prev) => prev.filter((v) => v._id !== videoId));
    } catch (err) {
      console.error("Error completing watch:", err);
    }
  };

  // Skip a video
  const handleSkip = (videoId) => setVideos((prev) => prev.filter((v) => v._id !== videoId));

  return (
    <div className="p-6 max-w-3xl mx-auto space-y-6">
      <h2 className="text-2xl font-bold mb-4">Promoted YouTube Videos</h2>

      {videos.length ? (
        videos.map((v) => (
          <div key={v._id} className="bg-gray-100 p-4 rounded shadow space-y-2">
            <h3 className="font-semibold break-words">{v.url}</h3>

            <iframe
              width="100%"
              height="315"
              src={`https://www.youtube.com/embed/${extractYouTubeID(v.url)}`}
              title="YouTube video"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
            />

            <p>⏳ Time Left: {timeLeft[v._id]}s</p>
            <p>👀 Watches: {v.watches || 0}</p>
            <p>🏆 Points: {v.points}</p>

            <button
              onClick={() => handleStart(v._id)}
              className="bg-yellow-500 text-white px-4 py-2 rounded mr-2"
              disabled={timeLeft[v._id] !== (v.duration || 30)}
            >
              ▶️ Start Watch
            </button>

            <button
              onClick={() => handleComplete(v._id)}
              className="bg-blue-600 text-white px-4 py-2 rounded mr-2 disabled:opacity-50"
              disabled={timeLeft[v._id] > 0}
            >
              ✅ Complete & Earn Points
            </button>

            <button
              onClick={() => handleSkip(v._id)}
              className="bg-red-500 text-white px-4 py-2 rounded"
            >
              ❌ Skip
            </button>
          </div>
        ))
      ) : (
        <p>No promoted videos available yet.</p>
      )}
    </div>
  );
}